@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryAreas {
- {static} allDoors : Door[]
- {static} rootArea : Area
+ {static} makeAreas()
+ {static} findAreaById(id : String) : Area
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
}

DirectoryAreas --> "*" Door : "allDoors"

class DirectoryUsers {
- {static} users : User[]
+ {static} makeUsers()
+ {static} findUserByCredential(credential : String) : User
}

DirectoryUsers --> "*" User : "users"

class Door {
- id : String
- closed : boolean
- state : DoorState
- fromSpace : Space
- toSpace : Space
+ Door(id : String, fromSpace : Space, toSpace : Space)
+ processRequest(request : RequestReader)
+ isClosed() :boolean
- doAction(action : String)
+ getId() : String
+ getStateName() : String
+ toJson() : JSONObject
+ toString() : String
+ setState(doorState : DoorState)
+ setClosed(b : boolean)
+ getFromSpace() : Space
+ getToSpace() : Space
}


class User {
- name : String
- credential : String
- areas : Area[]
+ User(name: String, credential: String)
+ getCredential() : String
+ toString() : String
+ getSpaces() : Space[]
+ canBeInSpace(sp : Space) : boolean
+ addArea(Area : area)
}


class Main {
+ {static} main(args : String)
}

note right of Main::main
DirectoryAreas.makeAreas()
DiretoryUsers.makeUsers()
new Webserver()
end note

package doorState <<Folder>> {
    class States {

    }

    class Actions {
    + {static} LOCK : String
    + {static} UNLOCK : String
    + {static} UNLOCK_SHORTLY : String
    + {static} OPEN : String
    + {static} CLOSE : String
    }

    abstract class DoorState {
    #door : Door
    #name : String
    + DoorStates(Door : door)
    + {abstract} open()
    + {abstract} close()
    + {abstract} lock()
    + {abstract} unlock()
    }

    class Unlocked extends DoorState {
    +Unlocked(Door : door)
    + open()
    + close()
    + lock()
    + unlock()
    }

    class Locked extends DoorState {
    + Locked(Door : door)
    + open()
    + close()
    + lock()
    + unlock()
    }
}
Door --> "1" DoorState : "state"

abstract class Area {
#id: String
+Area: (id : String)
+ {abstract} findAreaById(id : String)
+ {abstract} getSpaces() : Space[]
+ {abstract} getDoorsGivingAccess : Door[]
+ {abstract} toString() : String
+ {abstract} toJson() : JSONObject
}

class Spaces extends Area{
-doors : Door[]
+Space(id : String, group : Partition)
+findAreaById(id : String)
+getSpaces() : Space[]
+getDoorsGivingAccess() : Door[]
+addDoor(Door : door)
}

class Partition extends Area{
-partition : Partition
-areas : Area[]
+Partition(id : String, partition : Partition)
+findAreaById(id : String)
+getSpaces() : Space[]
+getDoorsGivingAccess : Door[]
+addArea(Area : area)
}

class DirectoryUserGroup {

}

class UserGroup {

}

class Schedule {

}



Partition *--> "*" Area : areas
User --> "*" Area : "areas"
Spaces --> "*" Door : "doors"
Door --> "1" Spaces : "fromSpace"
Door --> "1" Spaces : "toSpace"


Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryAreas
DirectoryAreas -[hidden]right- DirectoryUsers
Door -[hidden]down- doorState
Spaces -[hidden]right- Partition
User -[hidden]right- Door
Spaces -[hidden]left- Door

@enduml